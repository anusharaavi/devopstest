# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
  
    runs-on: ubuntu-latest
   # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
         node-version: 15.x
         npm-version: 7.x.X
   
  # Rest of your workflow steps...

      - run: npm ci
       
       
      - run: npm run 
        working-directory: ./codebase/rdicidr-0.1.0/
      - run: npm install
        working-directory: ./codebase/rdicidr-0.1.0/
      - run: npm run lint
        working-directory: ./codebase/rdicidr-0.1.0/
      - run: npm install --save-dev prettier
        working-directory: ./codebase/rdicidr-0.1.0/
      - run: npm run prettier
        working-directory: ./codebase/rdicidr-0.1.0/
      - run: CI=true npm run test
        working-directory: ./codebase/rdicidr-0.1.0/
      - run: npm run build
        working-directory: ./codebase/rdicidr-0.1.0/
        
      - name: Check CI Pipeline Status
        run: |
          if [ $? -eq 0 ]; then
            echo "CI pipeline passed"
          else
            echo "CI pipeline failed"
            exit 1
          fi
  
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: '006678164789.dkr.ecr.us-east-1.amazonaws.com'
          IMAGE_TAG: latest
        run: |
          cd ./codebase/rdicidr-0.1.0/
          docker build -t github_actions_images .
          docker tag github_actions_images:$IMAGE_TAG $ECR_REGISTRY/github_actions_images:$IMAGE_TAG
          docker push $ECR_REGISTRY/github_actions_images:$IMAGE_TAG
      
      - name: Scan Docker image on ECR
        run: |
          aws ecr start-image-scan --repository-name github_actions_images --image-id 006678164789.dkr.ecr.us-east-1.amazonaws.com/github_actions_images:latest --image-tags latest --region us-east1
          
              
 
